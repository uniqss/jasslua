#include "jass_globals.h"
#include "jass_globals_vars.h"

void jass_globals::jasslua_regist_globals(sol::state_view lua)
{

//===================================================
// Game Constants    
//===================================================

    // pfff
	lua.set("FALSE", FALSE);
	lua.set("TRUE", TRUE);
	lua.set("JASS_MAX_ARRAY_SIZE", JASS_MAX_ARRAY_SIZE);

	lua.set("PLAYER_NEUTRAL_PASSIVE", PLAYER_NEUTRAL_PASSIVE);
	lua.set("PLAYER_NEUTRAL_AGGRESSIVE", PLAYER_NEUTRAL_AGGRESSIVE);

	lua.set("PLAYER_COLOR_RED", PLAYER_COLOR_RED);
	lua.set("PLAYER_COLOR_BLUE", PLAYER_COLOR_BLUE);
	lua.set("PLAYER_COLOR_CYAN", PLAYER_COLOR_CYAN);
	lua.set("PLAYER_COLOR_PURPLE", PLAYER_COLOR_PURPLE);
	lua.set("PLAYER_COLOR_YELLOW", PLAYER_COLOR_YELLOW);
	lua.set("PLAYER_COLOR_ORANGE", PLAYER_COLOR_ORANGE);
	lua.set("PLAYER_COLOR_GREEN", PLAYER_COLOR_GREEN);
	lua.set("PLAYER_COLOR_PINK", PLAYER_COLOR_PINK);
	lua.set("PLAYER_COLOR_LIGHT_GRAY", PLAYER_COLOR_LIGHT_GRAY);
	lua.set("PLAYER_COLOR_LIGHT_BLUE", PLAYER_COLOR_LIGHT_BLUE);
	lua.set("PLAYER_COLOR_AQUA", PLAYER_COLOR_AQUA);
	lua.set("PLAYER_COLOR_BROWN", PLAYER_COLOR_BROWN);

	lua.set("RACE_HUMAN", RACE_HUMAN);
	lua.set("RACE_ORC", RACE_ORC);
	lua.set("RACE_UNDEAD", RACE_UNDEAD);
	lua.set("RACE_NIGHTELF", RACE_NIGHTELF);
	lua.set("RACE_DEMON", RACE_DEMON);
	lua.set("RACE_OTHER", RACE_OTHER);

	lua.set("PLAYER_GAME_RESULT_VICTORY", PLAYER_GAME_RESULT_VICTORY);
	lua.set("PLAYER_GAME_RESULT_DEFEAT", PLAYER_GAME_RESULT_DEFEAT);
	lua.set("PLAYER_GAME_RESULT_TIE", PLAYER_GAME_RESULT_TIE);
	lua.set("PLAYER_GAME_RESULT_NEUTRAL", PLAYER_GAME_RESULT_NEUTRAL);

	lua.set("ALLIANCE_PASSIVE", ALLIANCE_PASSIVE);
	lua.set("ALLIANCE_HELP_REQUEST", ALLIANCE_HELP_REQUEST);
	lua.set("ALLIANCE_HELP_RESPONSE", ALLIANCE_HELP_RESPONSE);
	lua.set("ALLIANCE_SHARED_XP", ALLIANCE_SHARED_XP);
	lua.set("ALLIANCE_SHARED_SPELLS", ALLIANCE_SHARED_SPELLS);
	lua.set("ALLIANCE_SHARED_VISION", ALLIANCE_SHARED_VISION);
	lua.set("ALLIANCE_SHARED_CONTROL", ALLIANCE_SHARED_CONTROL);
	lua.set("ALLIANCE_SHARED_ADVANCED_CONTROL", ALLIANCE_SHARED_ADVANCED_CONTROL);
	lua.set("ALLIANCE_RESCUABLE", ALLIANCE_RESCUABLE);
	lua.set("ALLIANCE_SHARED_VISION_FORCED", ALLIANCE_SHARED_VISION_FORCED);

	lua.set("VERSION_REIGN_OF_CHAOS", VERSION_REIGN_OF_CHAOS);
	lua.set("VERSION_FROZEN_THRONE", VERSION_FROZEN_THRONE);

	lua.set("ATTACK_TYPE_NORMAL", ATTACK_TYPE_NORMAL);
	lua.set("ATTACK_TYPE_MELEE", ATTACK_TYPE_MELEE);
	lua.set("ATTACK_TYPE_PIERCE", ATTACK_TYPE_PIERCE);
	lua.set("ATTACK_TYPE_SIEGE", ATTACK_TYPE_SIEGE);
	lua.set("ATTACK_TYPE_MAGIC", ATTACK_TYPE_MAGIC);
	lua.set("ATTACK_TYPE_CHAOS", ATTACK_TYPE_CHAOS);
	lua.set("ATTACK_TYPE_HERO", ATTACK_TYPE_HERO);

	lua.set("DAMAGE_TYPE_UNKNOWN", DAMAGE_TYPE_UNKNOWN);
	lua.set("DAMAGE_TYPE_NORMAL", DAMAGE_TYPE_NORMAL);
	lua.set("DAMAGE_TYPE_ENHANCED", DAMAGE_TYPE_ENHANCED);
	lua.set("DAMAGE_TYPE_FIRE", DAMAGE_TYPE_FIRE);
	lua.set("DAMAGE_TYPE_COLD", DAMAGE_TYPE_COLD);
	lua.set("DAMAGE_TYPE_LIGHTNING", DAMAGE_TYPE_LIGHTNING);
	lua.set("DAMAGE_TYPE_POISON", DAMAGE_TYPE_POISON);
	lua.set("DAMAGE_TYPE_DISEASE", DAMAGE_TYPE_DISEASE);
	lua.set("DAMAGE_TYPE_DIVINE", DAMAGE_TYPE_DIVINE);
	lua.set("DAMAGE_TYPE_MAGIC", DAMAGE_TYPE_MAGIC);
	lua.set("DAMAGE_TYPE_SONIC", DAMAGE_TYPE_SONIC);
	lua.set("DAMAGE_TYPE_ACID", DAMAGE_TYPE_ACID);
	lua.set("DAMAGE_TYPE_FORCE", DAMAGE_TYPE_FORCE);
	lua.set("DAMAGE_TYPE_DEATH", DAMAGE_TYPE_DEATH);
	lua.set("DAMAGE_TYPE_MIND", DAMAGE_TYPE_MIND);
	lua.set("DAMAGE_TYPE_PLANT", DAMAGE_TYPE_PLANT);
	lua.set("DAMAGE_TYPE_DEFENSIVE", DAMAGE_TYPE_DEFENSIVE);
	lua.set("DAMAGE_TYPE_DEMOLITION", DAMAGE_TYPE_DEMOLITION);
	lua.set("DAMAGE_TYPE_SLOW_POISON", DAMAGE_TYPE_SLOW_POISON);
	lua.set("DAMAGE_TYPE_SPIRIT_LINK", DAMAGE_TYPE_SPIRIT_LINK);
	lua.set("DAMAGE_TYPE_SHADOW_STRIKE", DAMAGE_TYPE_SHADOW_STRIKE);
	lua.set("DAMAGE_TYPE_UNIVERSAL", DAMAGE_TYPE_UNIVERSAL);

	lua.set("WEAPON_TYPE_WHOKNOWS", WEAPON_TYPE_WHOKNOWS);
	lua.set("WEAPON_TYPE_METAL_LIGHT_CHOP", WEAPON_TYPE_METAL_LIGHT_CHOP);
	lua.set("WEAPON_TYPE_METAL_MEDIUM_CHOP", WEAPON_TYPE_METAL_MEDIUM_CHOP);
	lua.set("WEAPON_TYPE_METAL_HEAVY_CHOP", WEAPON_TYPE_METAL_HEAVY_CHOP);
	lua.set("WEAPON_TYPE_METAL_LIGHT_SLICE", WEAPON_TYPE_METAL_LIGHT_SLICE);
	lua.set("WEAPON_TYPE_METAL_MEDIUM_SLICE", WEAPON_TYPE_METAL_MEDIUM_SLICE);
	lua.set("WEAPON_TYPE_METAL_HEAVY_SLICE", WEAPON_TYPE_METAL_HEAVY_SLICE);
	lua.set("WEAPON_TYPE_METAL_MEDIUM_BASH", WEAPON_TYPE_METAL_MEDIUM_BASH);
	lua.set("WEAPON_TYPE_METAL_HEAVY_BASH", WEAPON_TYPE_METAL_HEAVY_BASH);
	lua.set("WEAPON_TYPE_METAL_MEDIUM_STAB", WEAPON_TYPE_METAL_MEDIUM_STAB);
	lua.set("WEAPON_TYPE_METAL_HEAVY_STAB", WEAPON_TYPE_METAL_HEAVY_STAB);
	lua.set("WEAPON_TYPE_WOOD_LIGHT_SLICE", WEAPON_TYPE_WOOD_LIGHT_SLICE);
	lua.set("WEAPON_TYPE_WOOD_MEDIUM_SLICE", WEAPON_TYPE_WOOD_MEDIUM_SLICE);
	lua.set("WEAPON_TYPE_WOOD_HEAVY_SLICE", WEAPON_TYPE_WOOD_HEAVY_SLICE);
	lua.set("WEAPON_TYPE_WOOD_LIGHT_BASH", WEAPON_TYPE_WOOD_LIGHT_BASH);
	lua.set("WEAPON_TYPE_WOOD_MEDIUM_BASH", WEAPON_TYPE_WOOD_MEDIUM_BASH);
	lua.set("WEAPON_TYPE_WOOD_HEAVY_BASH", WEAPON_TYPE_WOOD_HEAVY_BASH);
	lua.set("WEAPON_TYPE_WOOD_LIGHT_STAB", WEAPON_TYPE_WOOD_LIGHT_STAB);
	lua.set("WEAPON_TYPE_WOOD_MEDIUM_STAB", WEAPON_TYPE_WOOD_MEDIUM_STAB);
	lua.set("WEAPON_TYPE_CLAW_LIGHT_SLICE", WEAPON_TYPE_CLAW_LIGHT_SLICE);
	lua.set("WEAPON_TYPE_CLAW_MEDIUM_SLICE", WEAPON_TYPE_CLAW_MEDIUM_SLICE);
	lua.set("WEAPON_TYPE_CLAW_HEAVY_SLICE", WEAPON_TYPE_CLAW_HEAVY_SLICE);
	lua.set("WEAPON_TYPE_AXE_MEDIUM_CHOP", WEAPON_TYPE_AXE_MEDIUM_CHOP);
	lua.set("WEAPON_TYPE_ROCK_HEAVY_BASH", WEAPON_TYPE_ROCK_HEAVY_BASH);

	lua.set("PATHING_TYPE_ANY", PATHING_TYPE_ANY);
	lua.set("PATHING_TYPE_WALKABILITY", PATHING_TYPE_WALKABILITY);
	lua.set("PATHING_TYPE_FLYABILITY", PATHING_TYPE_FLYABILITY);
	lua.set("PATHING_TYPE_BUILDABILITY", PATHING_TYPE_BUILDABILITY);
	lua.set("PATHING_TYPE_PEONHARVESTPATHING", PATHING_TYPE_PEONHARVESTPATHING);
	lua.set("PATHING_TYPE_BLIGHTPATHING", PATHING_TYPE_BLIGHTPATHING);
	lua.set("PATHING_TYPE_FLOATABILITY", PATHING_TYPE_FLOATABILITY);
	lua.set("PATHING_TYPE_AMPHIBIOUSPATHING", PATHING_TYPE_AMPHIBIOUSPATHING);

//===================================================
// Map Setup Constants    
//===================================================

	lua.set("RACE_PREF_HUMAN", RACE_PREF_HUMAN);
	lua.set("RACE_PREF_ORC", RACE_PREF_ORC);
	lua.set("RACE_PREF_NIGHTELF", RACE_PREF_NIGHTELF);
	lua.set("RACE_PREF_UNDEAD", RACE_PREF_UNDEAD);
	lua.set("RACE_PREF_DEMON", RACE_PREF_DEMON);
	lua.set("RACE_PREF_RANDOM", RACE_PREF_RANDOM);
	lua.set("RACE_PREF_USER_SELECTABLE", RACE_PREF_USER_SELECTABLE);

	lua.set("MAP_CONTROL_USER", MAP_CONTROL_USER);
	lua.set("MAP_CONTROL_COMPUTER", MAP_CONTROL_COMPUTER);
	lua.set("MAP_CONTROL_RESCUABLE", MAP_CONTROL_RESCUABLE);
	lua.set("MAP_CONTROL_NEUTRAL", MAP_CONTROL_NEUTRAL);
	lua.set("MAP_CONTROL_CREEP", MAP_CONTROL_CREEP);
	lua.set("MAP_CONTROL_NONE", MAP_CONTROL_NONE);

	lua.set("GAME_TYPE_MELEE", GAME_TYPE_MELEE);
	lua.set("GAME_TYPE_FFA", GAME_TYPE_FFA);
	lua.set("GAME_TYPE_USE_MAP_SETTINGS", GAME_TYPE_USE_MAP_SETTINGS);
	lua.set("GAME_TYPE_BLIZ", GAME_TYPE_BLIZ);
	lua.set("GAME_TYPE_ONE_ON_ONE", GAME_TYPE_ONE_ON_ONE);
	lua.set("GAME_TYPE_TWO_TEAM_PLAY", GAME_TYPE_TWO_TEAM_PLAY);
	lua.set("GAME_TYPE_THREE_TEAM_PLAY", GAME_TYPE_THREE_TEAM_PLAY);
	lua.set("GAME_TYPE_FOUR_TEAM_PLAY", GAME_TYPE_FOUR_TEAM_PLAY);

	lua.set("MAP_FOG_HIDE_TERRAIN", MAP_FOG_HIDE_TERRAIN);
	lua.set("MAP_FOG_MAP_EXPLORED", MAP_FOG_MAP_EXPLORED);
	lua.set("MAP_FOG_ALWAYS_VISIBLE", MAP_FOG_ALWAYS_VISIBLE);

	lua.set("MAP_USE_HANDICAPS", MAP_USE_HANDICAPS);
	lua.set("MAP_OBSERVERS", MAP_OBSERVERS);
	lua.set("MAP_OBSERVERS_ON_DEATH", MAP_OBSERVERS_ON_DEATH);

	lua.set("MAP_FIXED_COLORS", MAP_FIXED_COLORS);
    
	lua.set("MAP_LOCK_RESOURCE_TRADING", MAP_LOCK_RESOURCE_TRADING);
	lua.set("MAP_RESOURCE_TRADING_ALLIES_ONLY", MAP_RESOURCE_TRADING_ALLIES_ONLY);

	lua.set("MAP_LOCK_ALLIANCE_CHANGES", MAP_LOCK_ALLIANCE_CHANGES);
	lua.set("MAP_ALLIANCE_CHANGES_HIDDEN", MAP_ALLIANCE_CHANGES_HIDDEN);

	lua.set("MAP_CHEATS", MAP_CHEATS);
	lua.set("MAP_CHEATS_HIDDEN", MAP_CHEATS_HIDDEN);

	lua.set("MAP_LOCK_SPEED", MAP_LOCK_SPEED);
	lua.set("MAP_LOCK_RANDOM_SEED", MAP_LOCK_RANDOM_SEED);
	lua.set("MAP_SHARED_ADVANCED_CONTROL", MAP_SHARED_ADVANCED_CONTROL);
	lua.set("MAP_RANDOM_HERO", MAP_RANDOM_HERO);
	lua.set("MAP_RANDOM_RACES", MAP_RANDOM_RACES);
	lua.set("MAP_RELOADED", MAP_RELOADED);

	lua.set("MAP_PLACEMENT_RANDOM", MAP_PLACEMENT_RANDOM);
	lua.set("MAP_PLACEMENT_FIXED", MAP_PLACEMENT_FIXED);
	lua.set("MAP_PLACEMENT_USE_MAP_SETTINGS", MAP_PLACEMENT_USE_MAP_SETTINGS);
	lua.set("MAP_PLACEMENT_TEAMS_TOGETHER", MAP_PLACEMENT_TEAMS_TOGETHER);

	lua.set("MAP_LOC_PRIO_LOW", MAP_LOC_PRIO_LOW);
	lua.set("MAP_LOC_PRIO_HIGH", MAP_LOC_PRIO_HIGH);
	lua.set("MAP_LOC_PRIO_NOT", MAP_LOC_PRIO_NOT);

	lua.set("MAP_DENSITY_NONE", MAP_DENSITY_NONE);
	lua.set("MAP_DENSITY_LIGHT", MAP_DENSITY_LIGHT);
	lua.set("MAP_DENSITY_MEDIUM", MAP_DENSITY_MEDIUM);
	lua.set("MAP_DENSITY_HEAVY", MAP_DENSITY_HEAVY);

	lua.set("MAP_DIFFICULTY_EASY", MAP_DIFFICULTY_EASY);
	lua.set("MAP_DIFFICULTY_NORMAL", MAP_DIFFICULTY_NORMAL);
	lua.set("MAP_DIFFICULTY_HARD", MAP_DIFFICULTY_HARD);
	lua.set("MAP_DIFFICULTY_INSANE", MAP_DIFFICULTY_INSANE);

	lua.set("MAP_SPEED_SLOWEST", MAP_SPEED_SLOWEST);
	lua.set("MAP_SPEED_SLOW", MAP_SPEED_SLOW);
	lua.set("MAP_SPEED_NORMAL", MAP_SPEED_NORMAL);
	lua.set("MAP_SPEED_FAST", MAP_SPEED_FAST);
	lua.set("MAP_SPEED_FASTEST", MAP_SPEED_FASTEST);

	lua.set("PLAYER_SLOT_STATE_EMPTY", PLAYER_SLOT_STATE_EMPTY);
	lua.set("PLAYER_SLOT_STATE_PLAYING", PLAYER_SLOT_STATE_PLAYING);
	lua.set("PLAYER_SLOT_STATE_LEFT", PLAYER_SLOT_STATE_LEFT);

//===================================================
// Sound Constants
//===================================================
	lua.set("SOUND_VOLUMEGROUP_UNITMOVEMENT", SOUND_VOLUMEGROUP_UNITMOVEMENT);
	lua.set("SOUND_VOLUMEGROUP_UNITSOUNDS", SOUND_VOLUMEGROUP_UNITSOUNDS);
	lua.set("SOUND_VOLUMEGROUP_COMBAT", SOUND_VOLUMEGROUP_COMBAT);
	lua.set("SOUND_VOLUMEGROUP_SPELLS", SOUND_VOLUMEGROUP_SPELLS);
	lua.set("SOUND_VOLUMEGROUP_UI", SOUND_VOLUMEGROUP_UI);
	lua.set("SOUND_VOLUMEGROUP_MUSIC", SOUND_VOLUMEGROUP_MUSIC);
	lua.set("SOUND_VOLUMEGROUP_AMBIENTSOUNDS", SOUND_VOLUMEGROUP_AMBIENTSOUNDS);
	lua.set("SOUND_VOLUMEGROUP_FIRE", SOUND_VOLUMEGROUP_FIRE);


//===================================================
// Game, Player, and Unit States
//
// For use with TriggerRegister<X>StateEvent
//
//===================================================

	lua.set("GAME_STATE_DIVINE_INTERVENTION", GAME_STATE_DIVINE_INTERVENTION);
	lua.set("GAME_STATE_DISCONNECTED", GAME_STATE_DISCONNECTED);
	lua.set("GAME_STATE_TIME_OF_DAY", GAME_STATE_TIME_OF_DAY);

	lua.set("PLAYER_STATE_GAME_RESULT", PLAYER_STATE_GAME_RESULT);

    // current resource levels
    //
	lua.set("PLAYER_STATE_RESOURCE_GOLD", PLAYER_STATE_RESOURCE_GOLD);
	lua.set("PLAYER_STATE_RESOURCE_LUMBER", PLAYER_STATE_RESOURCE_LUMBER);
	lua.set("PLAYER_STATE_RESOURCE_HERO_TOKENS", PLAYER_STATE_RESOURCE_HERO_TOKENS);
	lua.set("PLAYER_STATE_RESOURCE_FOOD_CAP", PLAYER_STATE_RESOURCE_FOOD_CAP);
	lua.set("PLAYER_STATE_RESOURCE_FOOD_USED", PLAYER_STATE_RESOURCE_FOOD_USED);
	lua.set("PLAYER_STATE_FOOD_CAP_CEILING", PLAYER_STATE_FOOD_CAP_CEILING);

	lua.set("PLAYER_STATE_GIVES_BOUNTY", PLAYER_STATE_GIVES_BOUNTY);
	lua.set("PLAYER_STATE_ALLIED_VICTORY", PLAYER_STATE_ALLIED_VICTORY);
	lua.set("PLAYER_STATE_PLACED", PLAYER_STATE_PLACED);
	lua.set("PLAYER_STATE_OBSERVER_ON_DEATH", PLAYER_STATE_OBSERVER_ON_DEATH);
	lua.set("PLAYER_STATE_OBSERVER", PLAYER_STATE_OBSERVER);
	lua.set("PLAYER_STATE_UNFOLLOWABLE", PLAYER_STATE_UNFOLLOWABLE);

    // taxation rate for each resource
    //
	lua.set("PLAYER_STATE_GOLD_UPKEEP_RATE", PLAYER_STATE_GOLD_UPKEEP_RATE);
	lua.set("PLAYER_STATE_LUMBER_UPKEEP_RATE", PLAYER_STATE_LUMBER_UPKEEP_RATE);

    // cumulative resources collected by the player during the mission
    //
	lua.set("PLAYER_STATE_GOLD_GATHERED", PLAYER_STATE_GOLD_GATHERED);
	lua.set("PLAYER_STATE_LUMBER_GATHERED", PLAYER_STATE_LUMBER_GATHERED);

	lua.set("PLAYER_STATE_NO_CREEP_SLEEP", PLAYER_STATE_NO_CREEP_SLEEP);

	lua.set("UNIT_STATE_LIFE", UNIT_STATE_LIFE);
	lua.set("UNIT_STATE_MAX_LIFE", UNIT_STATE_MAX_LIFE);
	lua.set("UNIT_STATE_MANA", UNIT_STATE_MANA);
	lua.set("UNIT_STATE_MAX_MANA", UNIT_STATE_MAX_MANA);

	lua.set("AI_DIFFICULTY_NEWBIE", AI_DIFFICULTY_NEWBIE);
	lua.set("AI_DIFFICULTY_NORMAL", AI_DIFFICULTY_NORMAL);
	lua.set("AI_DIFFICULTY_INSANE", AI_DIFFICULTY_INSANE);

    // player score values
	lua.set("PLAYER_SCORE_UNITS_TRAINED", PLAYER_SCORE_UNITS_TRAINED);
	lua.set("PLAYER_SCORE_UNITS_KILLED", PLAYER_SCORE_UNITS_KILLED);
	lua.set("PLAYER_SCORE_STRUCT_BUILT", PLAYER_SCORE_STRUCT_BUILT);
	lua.set("PLAYER_SCORE_STRUCT_RAZED", PLAYER_SCORE_STRUCT_RAZED);
	lua.set("PLAYER_SCORE_TECH_PERCENT", PLAYER_SCORE_TECH_PERCENT);
	lua.set("PLAYER_SCORE_FOOD_MAXPROD", PLAYER_SCORE_FOOD_MAXPROD);
	lua.set("PLAYER_SCORE_FOOD_MAXUSED", PLAYER_SCORE_FOOD_MAXUSED);
	lua.set("PLAYER_SCORE_HEROES_KILLED", PLAYER_SCORE_HEROES_KILLED);
	lua.set("PLAYER_SCORE_ITEMS_GAINED", PLAYER_SCORE_ITEMS_GAINED);
	lua.set("PLAYER_SCORE_MERCS_HIRED", PLAYER_SCORE_MERCS_HIRED);
	lua.set("PLAYER_SCORE_GOLD_MINED_TOTAL", PLAYER_SCORE_GOLD_MINED_TOTAL);
	lua.set("PLAYER_SCORE_GOLD_MINED_UPKEEP", PLAYER_SCORE_GOLD_MINED_UPKEEP);
	lua.set("PLAYER_SCORE_GOLD_LOST_UPKEEP", PLAYER_SCORE_GOLD_LOST_UPKEEP);
	lua.set("PLAYER_SCORE_GOLD_LOST_TAX", PLAYER_SCORE_GOLD_LOST_TAX);
	lua.set("PLAYER_SCORE_GOLD_GIVEN", PLAYER_SCORE_GOLD_GIVEN);
	lua.set("PLAYER_SCORE_GOLD_RECEIVED", PLAYER_SCORE_GOLD_RECEIVED);
	lua.set("PLAYER_SCORE_LUMBER_TOTAL", PLAYER_SCORE_LUMBER_TOTAL);
	lua.set("PLAYER_SCORE_LUMBER_LOST_UPKEEP", PLAYER_SCORE_LUMBER_LOST_UPKEEP);
	lua.set("PLAYER_SCORE_LUMBER_LOST_TAX", PLAYER_SCORE_LUMBER_LOST_TAX);
	lua.set("PLAYER_SCORE_LUMBER_GIVEN", PLAYER_SCORE_LUMBER_GIVEN);
	lua.set("PLAYER_SCORE_LUMBER_RECEIVED", PLAYER_SCORE_LUMBER_RECEIVED);
	lua.set("PLAYER_SCORE_UNIT_TOTAL", PLAYER_SCORE_UNIT_TOTAL);
	lua.set("PLAYER_SCORE_HERO_TOTAL", PLAYER_SCORE_HERO_TOTAL);
	lua.set("PLAYER_SCORE_RESOURCE_TOTAL", PLAYER_SCORE_RESOURCE_TOTAL);
	lua.set("PLAYER_SCORE_TOTAL", PLAYER_SCORE_TOTAL);
        
//===================================================
// Game, Player and Unit Events
//
//  When an event causes a trigger to fire these
//  values allow the action code to determine which
//  event was dispatched and therefore which set of
//  native functions should be used to get information
//  about the event.
//
// Do NOT change the order or value of these constants
// without insuring that the JASS_GAME_EVENTS_WAR3 enum
// is changed to match.
//
//===================================================

    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    

	lua.set("EVENT_GAME_VICTORY", EVENT_GAME_VICTORY);
	lua.set("EVENT_GAME_END_LEVEL", EVENT_GAME_END_LEVEL);

	lua.set("EVENT_GAME_VARIABLE_LIMIT", EVENT_GAME_VARIABLE_LIMIT);
	lua.set("EVENT_GAME_STATE_LIMIT", EVENT_GAME_STATE_LIMIT);

	lua.set("EVENT_GAME_TIMER_EXPIRED", EVENT_GAME_TIMER_EXPIRED);

	lua.set("EVENT_GAME_ENTER_REGION", EVENT_GAME_ENTER_REGION);
	lua.set("EVENT_GAME_LEAVE_REGION", EVENT_GAME_LEAVE_REGION);

	lua.set("EVENT_GAME_TRACKABLE_HIT", EVENT_GAME_TRACKABLE_HIT);
	lua.set("EVENT_GAME_TRACKABLE_TRACK", EVENT_GAME_TRACKABLE_TRACK);

	lua.set("EVENT_GAME_SHOW_SKILL", EVENT_GAME_SHOW_SKILL);
	lua.set("EVENT_GAME_BUILD_SUBMENU", EVENT_GAME_BUILD_SUBMENU);

    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
	lua.set("EVENT_PLAYER_STATE_LIMIT", EVENT_PLAYER_STATE_LIMIT);
	lua.set("EVENT_PLAYER_ALLIANCE_CHANGED", EVENT_PLAYER_ALLIANCE_CHANGED);

	lua.set("EVENT_PLAYER_DEFEAT", EVENT_PLAYER_DEFEAT);
	lua.set("EVENT_PLAYER_VICTORY", EVENT_PLAYER_VICTORY);
	lua.set("EVENT_PLAYER_LEAVE", EVENT_PLAYER_LEAVE);
	lua.set("EVENT_PLAYER_CHAT", EVENT_PLAYER_CHAT);
	lua.set("EVENT_PLAYER_END_CINEMATIC", EVENT_PLAYER_END_CINEMATIC);

    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================

	lua.set("EVENT_PLAYER_UNIT_ATTACKED", EVENT_PLAYER_UNIT_ATTACKED);
	lua.set("EVENT_PLAYER_UNIT_RESCUED", EVENT_PLAYER_UNIT_RESCUED);

	lua.set("EVENT_PLAYER_UNIT_DEATH", EVENT_PLAYER_UNIT_DEATH);
	lua.set("EVENT_PLAYER_UNIT_DECAY", EVENT_PLAYER_UNIT_DECAY);

	lua.set("EVENT_PLAYER_UNIT_DETECTED", EVENT_PLAYER_UNIT_DETECTED);
	lua.set("EVENT_PLAYER_UNIT_HIDDEN", EVENT_PLAYER_UNIT_HIDDEN);

	lua.set("EVENT_PLAYER_UNIT_SELECTED", EVENT_PLAYER_UNIT_SELECTED);
	lua.set("EVENT_PLAYER_UNIT_DESELECTED", EVENT_PLAYER_UNIT_DESELECTED);

	lua.set("EVENT_PLAYER_UNIT_CONSTRUCT_START", EVENT_PLAYER_UNIT_CONSTRUCT_START);
	lua.set("EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL", EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL);
	lua.set("EVENT_PLAYER_UNIT_CONSTRUCT_FINISH", EVENT_PLAYER_UNIT_CONSTRUCT_FINISH);

	lua.set("EVENT_PLAYER_UNIT_UPGRADE_START", EVENT_PLAYER_UNIT_UPGRADE_START);
	lua.set("EVENT_PLAYER_UNIT_UPGRADE_CANCEL", EVENT_PLAYER_UNIT_UPGRADE_CANCEL);
	lua.set("EVENT_PLAYER_UNIT_UPGRADE_FINISH", EVENT_PLAYER_UNIT_UPGRADE_FINISH);

	lua.set("EVENT_PLAYER_UNIT_TRAIN_START", EVENT_PLAYER_UNIT_TRAIN_START);
	lua.set("EVENT_PLAYER_UNIT_TRAIN_CANCEL", EVENT_PLAYER_UNIT_TRAIN_CANCEL);
	lua.set("EVENT_PLAYER_UNIT_TRAIN_FINISH", EVENT_PLAYER_UNIT_TRAIN_FINISH);

	lua.set("EVENT_PLAYER_UNIT_RESEARCH_START", EVENT_PLAYER_UNIT_RESEARCH_START);
	lua.set("EVENT_PLAYER_UNIT_RESEARCH_CANCEL", EVENT_PLAYER_UNIT_RESEARCH_CANCEL);
	lua.set("EVENT_PLAYER_UNIT_RESEARCH_FINISH", EVENT_PLAYER_UNIT_RESEARCH_FINISH);
	lua.set("EVENT_PLAYER_UNIT_ISSUED_ORDER", EVENT_PLAYER_UNIT_ISSUED_ORDER);
	lua.set("EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER", EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER);
	lua.set("EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER", EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
	lua.set("EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER", EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER);

	lua.set("EVENT_PLAYER_HERO_LEVEL", EVENT_PLAYER_HERO_LEVEL);
	lua.set("EVENT_PLAYER_HERO_SKILL", EVENT_PLAYER_HERO_SKILL);

	lua.set("EVENT_PLAYER_HERO_REVIVABLE", EVENT_PLAYER_HERO_REVIVABLE);

	lua.set("EVENT_PLAYER_HERO_REVIVE_START", EVENT_PLAYER_HERO_REVIVE_START);
	lua.set("EVENT_PLAYER_HERO_REVIVE_CANCEL", EVENT_PLAYER_HERO_REVIVE_CANCEL);
	lua.set("EVENT_PLAYER_HERO_REVIVE_FINISH", EVENT_PLAYER_HERO_REVIVE_FINISH);
	lua.set("EVENT_PLAYER_UNIT_SUMMON", EVENT_PLAYER_UNIT_SUMMON);
	lua.set("EVENT_PLAYER_UNIT_DROP_ITEM", EVENT_PLAYER_UNIT_DROP_ITEM);
	lua.set("EVENT_PLAYER_UNIT_PICKUP_ITEM", EVENT_PLAYER_UNIT_PICKUP_ITEM);
	lua.set("EVENT_PLAYER_UNIT_USE_ITEM", EVENT_PLAYER_UNIT_USE_ITEM);

	lua.set("EVENT_PLAYER_UNIT_LOADED", EVENT_PLAYER_UNIT_LOADED);
    
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================

	lua.set("EVENT_UNIT_DAMAGED", EVENT_UNIT_DAMAGED);
	lua.set("EVENT_UNIT_DEATH", EVENT_UNIT_DEATH);
	lua.set("EVENT_UNIT_DECAY", EVENT_UNIT_DECAY);
	lua.set("EVENT_UNIT_DETECTED", EVENT_UNIT_DETECTED);
	lua.set("EVENT_UNIT_HIDDEN", EVENT_UNIT_HIDDEN);
	lua.set("EVENT_UNIT_SELECTED", EVENT_UNIT_SELECTED);
	lua.set("EVENT_UNIT_DESELECTED", EVENT_UNIT_DESELECTED);
                                                                        
	lua.set("EVENT_UNIT_STATE_LIMIT", EVENT_UNIT_STATE_LIMIT);

    // Events which may have a filter for the "other unit"              
    //                                                                  
	lua.set("EVENT_UNIT_ACQUIRED_TARGET", EVENT_UNIT_ACQUIRED_TARGET);
	lua.set("EVENT_UNIT_TARGET_IN_RANGE", EVENT_UNIT_TARGET_IN_RANGE);
	lua.set("EVENT_UNIT_ATTACKED", EVENT_UNIT_ATTACKED);
	lua.set("EVENT_UNIT_RESCUED", EVENT_UNIT_RESCUED);
                                                                        
	lua.set("EVENT_UNIT_CONSTRUCT_CANCEL", EVENT_UNIT_CONSTRUCT_CANCEL);
	lua.set("EVENT_UNIT_CONSTRUCT_FINISH", EVENT_UNIT_CONSTRUCT_FINISH);
                                                                        
	lua.set("EVENT_UNIT_UPGRADE_START", EVENT_UNIT_UPGRADE_START);
	lua.set("EVENT_UNIT_UPGRADE_CANCEL", EVENT_UNIT_UPGRADE_CANCEL);
	lua.set("EVENT_UNIT_UPGRADE_FINISH", EVENT_UNIT_UPGRADE_FINISH);
                                                                        
    // Events which involve the specified unit performing               
    // training of other units                                          
    //                                                                  
	lua.set("EVENT_UNIT_TRAIN_START", EVENT_UNIT_TRAIN_START);
	lua.set("EVENT_UNIT_TRAIN_CANCEL", EVENT_UNIT_TRAIN_CANCEL);
	lua.set("EVENT_UNIT_TRAIN_FINISH", EVENT_UNIT_TRAIN_FINISH);
                                                                        
	lua.set("EVENT_UNIT_RESEARCH_START", EVENT_UNIT_RESEARCH_START);
	lua.set("EVENT_UNIT_RESEARCH_CANCEL", EVENT_UNIT_RESEARCH_CANCEL);
	lua.set("EVENT_UNIT_RESEARCH_FINISH", EVENT_UNIT_RESEARCH_FINISH);
                                                                        
	lua.set("EVENT_UNIT_ISSUED_ORDER", EVENT_UNIT_ISSUED_ORDER);
	lua.set("EVENT_UNIT_ISSUED_POINT_ORDER", EVENT_UNIT_ISSUED_POINT_ORDER);
	lua.set("EVENT_UNIT_ISSUED_TARGET_ORDER", EVENT_UNIT_ISSUED_TARGET_ORDER);
                                                                       
	lua.set("EVENT_UNIT_HERO_LEVEL", EVENT_UNIT_HERO_LEVEL);
	lua.set("EVENT_UNIT_HERO_SKILL", EVENT_UNIT_HERO_SKILL);
                                                                        
	lua.set("EVENT_UNIT_HERO_REVIVABLE", EVENT_UNIT_HERO_REVIVABLE);
	lua.set("EVENT_UNIT_HERO_REVIVE_START", EVENT_UNIT_HERO_REVIVE_START);
	lua.set("EVENT_UNIT_HERO_REVIVE_CANCEL", EVENT_UNIT_HERO_REVIVE_CANCEL);
	lua.set("EVENT_UNIT_HERO_REVIVE_FINISH", EVENT_UNIT_HERO_REVIVE_FINISH);
                                                                        
	lua.set("EVENT_UNIT_SUMMON", EVENT_UNIT_SUMMON);
                                                                        
	lua.set("EVENT_UNIT_DROP_ITEM", EVENT_UNIT_DROP_ITEM);
	lua.set("EVENT_UNIT_PICKUP_ITEM", EVENT_UNIT_PICKUP_ITEM);
	lua.set("EVENT_UNIT_USE_ITEM", EVENT_UNIT_USE_ITEM);

	lua.set("EVENT_UNIT_LOADED", EVENT_UNIT_LOADED);

	lua.set("EVENT_WIDGET_DEATH", EVENT_WIDGET_DEATH);

	lua.set("EVENT_DIALOG_BUTTON_CLICK", EVENT_DIALOG_BUTTON_CLICK);
	lua.set("EVENT_DIALOG_CLICK", EVENT_DIALOG_CLICK);

    //===================================================
    // Frozen Throne Expansion Events
    // Need to be added here to preserve compat
    //===================================================

    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    

	lua.set("EVENT_GAME_LOADED", EVENT_GAME_LOADED);
	lua.set("EVENT_GAME_TOURNAMENT_FINISH_SOON", EVENT_GAME_TOURNAMENT_FINISH_SOON);
	lua.set("EVENT_GAME_TOURNAMENT_FINISH_NOW", EVENT_GAME_TOURNAMENT_FINISH_NOW);
	lua.set("EVENT_GAME_SAVE", EVENT_GAME_SAVE);

    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================

	lua.set("EVENT_PLAYER_ARROW_LEFT_DOWN", EVENT_PLAYER_ARROW_LEFT_DOWN);
	lua.set("EVENT_PLAYER_ARROW_LEFT_UP", EVENT_PLAYER_ARROW_LEFT_UP);
	lua.set("EVENT_PLAYER_ARROW_RIGHT_DOWN", EVENT_PLAYER_ARROW_RIGHT_DOWN);
	lua.set("EVENT_PLAYER_ARROW_RIGHT_UP", EVENT_PLAYER_ARROW_RIGHT_UP);
	lua.set("EVENT_PLAYER_ARROW_DOWN_DOWN", EVENT_PLAYER_ARROW_DOWN_DOWN);
	lua.set("EVENT_PLAYER_ARROW_DOWN_UP", EVENT_PLAYER_ARROW_DOWN_UP);
	lua.set("EVENT_PLAYER_ARROW_UP_DOWN", EVENT_PLAYER_ARROW_UP_DOWN);
	lua.set("EVENT_PLAYER_ARROW_UP_UP", EVENT_PLAYER_ARROW_UP_UP);

    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================

	lua.set("EVENT_PLAYER_UNIT_SELL", EVENT_PLAYER_UNIT_SELL);
	lua.set("EVENT_PLAYER_UNIT_CHANGE_OWNER", EVENT_PLAYER_UNIT_CHANGE_OWNER);
	lua.set("EVENT_PLAYER_UNIT_SELL_ITEM", EVENT_PLAYER_UNIT_SELL_ITEM);
	lua.set("EVENT_PLAYER_UNIT_SPELL_CHANNEL", EVENT_PLAYER_UNIT_SPELL_CHANNEL);
	lua.set("EVENT_PLAYER_UNIT_SPELL_CAST", EVENT_PLAYER_UNIT_SPELL_CAST);
	lua.set("EVENT_PLAYER_UNIT_SPELL_EFFECT", EVENT_PLAYER_UNIT_SPELL_EFFECT);
	lua.set("EVENT_PLAYER_UNIT_SPELL_FINISH", EVENT_PLAYER_UNIT_SPELL_FINISH);
	lua.set("EVENT_PLAYER_UNIT_SPELL_ENDCAST", EVENT_PLAYER_UNIT_SPELL_ENDCAST);
	lua.set("EVENT_PLAYER_UNIT_PAWN_ITEM", EVENT_PLAYER_UNIT_PAWN_ITEM);

    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================

	lua.set("EVENT_UNIT_SELL", EVENT_UNIT_SELL);
	lua.set("EVENT_UNIT_CHANGE_OWNER", EVENT_UNIT_CHANGE_OWNER);
	lua.set("EVENT_UNIT_SELL_ITEM", EVENT_UNIT_SELL_ITEM);
	lua.set("EVENT_UNIT_SPELL_CHANNEL", EVENT_UNIT_SPELL_CHANNEL);
	lua.set("EVENT_UNIT_SPELL_CAST", EVENT_UNIT_SPELL_CAST);
	lua.set("EVENT_UNIT_SPELL_EFFECT", EVENT_UNIT_SPELL_EFFECT);
	lua.set("EVENT_UNIT_SPELL_FINISH", EVENT_UNIT_SPELL_FINISH);
	lua.set("EVENT_UNIT_SPELL_ENDCAST", EVENT_UNIT_SPELL_ENDCAST);
	lua.set("EVENT_UNIT_PAWN_ITEM", EVENT_UNIT_PAWN_ITEM);

    //===================================================
    // Limit Event API constants    
    // variable, player state, game state, and unit state events
    // ( do NOT change the order of these... )
    //===================================================
	lua.set("LESS_THAN", LESS_THAN);
	lua.set("LESS_THAN_OR_EQUAL", LESS_THAN_OR_EQUAL);
	lua.set("EQUAL", EQUAL);
	lua.set("GREATER_THAN_OR_EQUAL", GREATER_THAN_OR_EQUAL);
	lua.set("GREATER_THAN", GREATER_THAN);
	lua.set("NOT_EQUAL", NOT_EQUAL);

//===================================================
// Unit Type Constants for use with IsUnitType()
//===================================================

	lua.set("UNIT_TYPE_HERO", UNIT_TYPE_HERO);
	lua.set("UNIT_TYPE_DEAD", UNIT_TYPE_DEAD);
	lua.set("UNIT_TYPE_STRUCTURE", UNIT_TYPE_STRUCTURE);

	lua.set("UNIT_TYPE_FLYING", UNIT_TYPE_FLYING);
	lua.set("UNIT_TYPE_GROUND", UNIT_TYPE_GROUND);

	lua.set("UNIT_TYPE_ATTACKS_FLYING", UNIT_TYPE_ATTACKS_FLYING);
	lua.set("UNIT_TYPE_ATTACKS_GROUND", UNIT_TYPE_ATTACKS_GROUND);

	lua.set("UNIT_TYPE_MELEE_ATTACKER", UNIT_TYPE_MELEE_ATTACKER);
	lua.set("UNIT_TYPE_RANGED_ATTACKER", UNIT_TYPE_RANGED_ATTACKER);

	lua.set("UNIT_TYPE_GIANT", UNIT_TYPE_GIANT);
	lua.set("UNIT_TYPE_SUMMONED", UNIT_TYPE_SUMMONED);
	lua.set("UNIT_TYPE_STUNNED", UNIT_TYPE_STUNNED);
	lua.set("UNIT_TYPE_PLAGUED", UNIT_TYPE_PLAGUED);
	lua.set("UNIT_TYPE_SNARED", UNIT_TYPE_SNARED);

	lua.set("UNIT_TYPE_UNDEAD", UNIT_TYPE_UNDEAD);
	lua.set("UNIT_TYPE_MECHANICAL", UNIT_TYPE_MECHANICAL);
	lua.set("UNIT_TYPE_PEON", UNIT_TYPE_PEON);
	lua.set("UNIT_TYPE_SAPPER", UNIT_TYPE_SAPPER);
	lua.set("UNIT_TYPE_TOWNHALL", UNIT_TYPE_TOWNHALL);
	lua.set("UNIT_TYPE_ANCIENT", UNIT_TYPE_ANCIENT);
    
	lua.set("UNIT_TYPE_TAUREN", UNIT_TYPE_TAUREN);
	lua.set("UNIT_TYPE_POISONED", UNIT_TYPE_POISONED);
	lua.set("UNIT_TYPE_POLYMORPHED", UNIT_TYPE_POLYMORPHED);
	lua.set("UNIT_TYPE_SLEEPING", UNIT_TYPE_SLEEPING);
	lua.set("UNIT_TYPE_RESISTANT", UNIT_TYPE_RESISTANT);
	lua.set("UNIT_TYPE_ETHEREAL", UNIT_TYPE_ETHEREAL);
	lua.set("UNIT_TYPE_MAGIC_IMMUNE", UNIT_TYPE_MAGIC_IMMUNE);

//===================================================
// Unit Type Constants for use with ChooseRandomItemEx()
//===================================================

	lua.set("ITEM_TYPE_PERMANENT", ITEM_TYPE_PERMANENT);
	lua.set("ITEM_TYPE_CHARGED", ITEM_TYPE_CHARGED);
	lua.set("ITEM_TYPE_POWERUP", ITEM_TYPE_POWERUP);
	lua.set("ITEM_TYPE_ARTIFACT", ITEM_TYPE_ARTIFACT);
	lua.set("ITEM_TYPE_PURCHASABLE", ITEM_TYPE_PURCHASABLE);
	lua.set("ITEM_TYPE_CAMPAIGN", ITEM_TYPE_CAMPAIGN);
	lua.set("ITEM_TYPE_MISCELLANEOUS", ITEM_TYPE_MISCELLANEOUS);
	lua.set("ITEM_TYPE_UNKNOWN", ITEM_TYPE_UNKNOWN);
	lua.set("ITEM_TYPE_ANY", ITEM_TYPE_ANY);

    // Deprecated, should use ITEM_TYPE_POWERUP
	lua.set("ITEM_TYPE_TOME", ITEM_TYPE_TOME);

//===================================================
// Animatable Camera Fields
//===================================================

	lua.set("CAMERA_FIELD_TARGET_DISTANCE", CAMERA_FIELD_TARGET_DISTANCE);
	lua.set("CAMERA_FIELD_FARZ", CAMERA_FIELD_FARZ);
	lua.set("CAMERA_FIELD_ANGLE_OF_ATTACK", CAMERA_FIELD_ANGLE_OF_ATTACK);
	lua.set("CAMERA_FIELD_FIELD_OF_VIEW", CAMERA_FIELD_FIELD_OF_VIEW);
	lua.set("CAMERA_FIELD_ROLL", CAMERA_FIELD_ROLL);
	lua.set("CAMERA_FIELD_ROTATION", CAMERA_FIELD_ROTATION);
	lua.set("CAMERA_FIELD_ZOFFSET", CAMERA_FIELD_ZOFFSET);

	lua.set("BLEND_MODE_NONE", BLEND_MODE_NONE);
	lua.set("BLEND_MODE_DONT_CARE", BLEND_MODE_DONT_CARE);
	lua.set("BLEND_MODE_KEYALPHA", BLEND_MODE_KEYALPHA);
	lua.set("BLEND_MODE_BLEND", BLEND_MODE_BLEND);
	lua.set("BLEND_MODE_ADDITIVE", BLEND_MODE_ADDITIVE);
	lua.set("BLEND_MODE_MODULATE", BLEND_MODE_MODULATE);
	lua.set("BLEND_MODE_MODULATE_2X", BLEND_MODE_MODULATE_2X);
    
	lua.set("RARITY_FREQUENT", RARITY_FREQUENT);
	lua.set("RARITY_RARE", RARITY_RARE);

	lua.set("TEXMAP_FLAG_NONE", TEXMAP_FLAG_NONE);
	lua.set("TEXMAP_FLAG_WRAP_U", TEXMAP_FLAG_WRAP_U);
	lua.set("TEXMAP_FLAG_WRAP_V", TEXMAP_FLAG_WRAP_V);
	lua.set("TEXMAP_FLAG_WRAP_UV", TEXMAP_FLAG_WRAP_UV);

	lua.set("FOG_OF_WAR_MASKED", FOG_OF_WAR_MASKED);
	lua.set("FOG_OF_WAR_FOGGED", FOG_OF_WAR_FOGGED);
	lua.set("FOG_OF_WAR_VISIBLE", FOG_OF_WAR_VISIBLE);

//===================================================
// Camera Margin constants for use with GetCameraMargin
//===================================================

	lua.set("CAMERA_MARGIN_LEFT", CAMERA_MARGIN_LEFT);
	lua.set("CAMERA_MARGIN_RIGHT", CAMERA_MARGIN_RIGHT);
	lua.set("CAMERA_MARGIN_TOP", CAMERA_MARGIN_TOP);
	lua.set("CAMERA_MARGIN_BOTTOM", CAMERA_MARGIN_BOTTOM);

//===================================================
// Effect API constants
//===================================================

	lua.set("EFFECT_TYPE_EFFECT", EFFECT_TYPE_EFFECT);
	lua.set("EFFECT_TYPE_TARGET", EFFECT_TYPE_TARGET);
	lua.set("EFFECT_TYPE_CASTER", EFFECT_TYPE_CASTER);
	lua.set("EFFECT_TYPE_SPECIAL", EFFECT_TYPE_SPECIAL);
	lua.set("EFFECT_TYPE_AREA_EFFECT", EFFECT_TYPE_AREA_EFFECT);
	lua.set("EFFECT_TYPE_MISSILE", EFFECT_TYPE_MISSILE);
	lua.set("EFFECT_TYPE_LIGHTNING", EFFECT_TYPE_LIGHTNING);

	lua.set("SOUND_TYPE_EFFECT", SOUND_TYPE_EFFECT);
	lua.set("SOUND_TYPE_EFFECT_LOOPED", SOUND_TYPE_EFFECT_LOOPED);

}
